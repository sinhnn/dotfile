snippet args	"Add an argparse"
import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--${1:}', help='$1', default='')
$0
args = parser.parse_args()
endsnippet

snippet add_arg "Add an arg"
parser.add_argument('--${1:}', help='$1', default='')
$0
endsnippet

snippet pr "print"
print ("${1:}" + ${2:} + ".")
$0
endsnippet

snippet read_file "Read a file line by line"
with open(${1:infile}, 'r') as f:
	for line in f:
		${2:statement}
endsnippet

snippet mlog
import logging
LOGGER = logging.getLogger(${1:__name__})
LOGGER.setLevel(logging.DEBUG)
fh = logging.FileHandler(${2:__file__} + '.log')
fh.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
LOGGER.addHandler(fh)
LOGGER.addHandler(ch)
$0
endsnippet

snippet debugLogger
import logging
FORMAT = "${1:%(asctime)s %(name)-12s %(levelname)-8s [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s %(message)s}"
logging.basicConfig(level=logging.DEBUG, format=FORMAT)
endsnippet

snippet debugFormat
DEBUG_FORMAT = "%(asctime)s %(name)-12s %(levelname)-8s [%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s %(message)s"
endsnippet

snippet platform
if platform.system() == "Windows":
    ${1:__CMD__=}
elif platform.system() == "Linux":
    $1
else:
    print("unsuported platform {}".format(platform.system()))
    sys.exit(1)
$0
endsnippet
