snippet header
-- vim: set tabstop=4 shiftwidth=4:
-------------------------------------------------------------------------------
-- Title       : ${1:Histogram of oriented gradient}
-- Project     :
-------------------------------------------------------------------------------
-- File        : ${2:`!p snip.rv = (snip.basename or "name")`}
-- Author      : ${3:`!v g:snips_author`}
-- Emails      : ${4:`!v g:mail`}
-- Created     : ${5:`date`}
-- Modified    :
-- Platform    :
-- Standard    :
-------------------------------------------------------------------------------
-- Description : $0
-------------------------------------------------------------------------------
endsnippet

snippet template "entity ... generic port ; | architecture ...;"
-- vim: set tabstop=4 shiftwidth=4:
-------------------------------------------------------------------------------
-- Title       : ${1:Histogram of oriented gradient}
-- Project     :
-------------------------------------------------------------------------------
-- File        : ${2:`!p snip.rv = (snip.basename or "name")`}
-- Author      : ${3:`!v g:snips_author`}
-- Emails      : ${4:`!v g:mail`}
-- Created     : ${5:`date`}
-- Modified    :
-- Platform    :
-- Standard    :
-------------------------------------------------------------------------------
-- Description : $0
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ${6:`!p snip.rv = (snip.basename or "name")`} is
	generic(
		$0
	);
	port(
	);
end $6;
architecture ${7:rtl_$6} of $6 is

begin

end $7;
endsnippet

snippet package "package ... end package ; | architecture ...;"
package ${1:`!p snip.rv = (snip.basename or "name")`}_pkg is
$0
end package $1_pkg;
endsnippet

snippet libs "library IEEE; | use IEEE.STD_LOGIC_1164.ALL;"
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
endsnippet

snippet in "... : in ...;"
i_${1:port_name} : in  ${2:un};
$0
endsnippet
snippet out "... : out ...;"
o_${1:port_name} : out ${2:un};
$0
endsnippet

snippet procedure "procedure ... ; | procedure ...;"
procedure ${1:}
	(
		$0
	) is
begin
end procedure $1;
endsnippet

snippet fun "function ...; | function ...;"
function ${1:name}
	(
		$2
	)
	return ${3:std_logic_vector} is
begin
	$0
end function $1;
endsnippet

snippet l "std_logic"
std_logic
endsnippet

snippet lv "std_logic_vector(... downto 0)"
std_logic_vector(${VISUAL}${0} downto 0)
endsnippet

snippet with "with ... select"
with ${1} select
	${2} <=
endsnippet

snippet component "component .... "
component ${VISUAL}${0}
	port(
	);
end component;
endsnippet

snippet pm "...: ... port map(...);"
${1}: ${2} port map(${3});
endsnippet

snippet type "type ... is (...);"
type ${1} is (${2});
endsnippet

snippet pro "process(...) ..."
process(${1:sensitive list})
	$0
begin
end process;
endsnippet

snippet npro "LABEL: process(...) ..."
----------
p_${1:LABEL}: process(${VISUAL}${0})
begin
end process p_$1;
endsnippet


snippet ifup "if (clk'event and clk = '1') then ..."
if (${1:clk}'event and $1 = '1') then
${VISUAL}${0}
end if;
endsnippet

snippet case "case ... is ..."
case ${1:signal} is
	when ${2:constant} =>
		$0
	when others => null;
end case;
endsnippet

snippet var "variable"
variable  : $0;
endsnippet

snippet signal "signal"
signal $1 : $0;
endsnippet

snippet tou "to_unsigned(signal, width)"
to_unsigned(${1:signal}, ${2:width})$0
endsnippet

snippet to_sfixed "to_unsigned(signal, integer width, fractional width)"
to_unsigned(${1:signal}, ${2:integer width}, ${3:fractional width})$0
endsnippet

snippet rst_syn "Syncrhonous reset"
process (${1:i_clk}) is
begin
	if rising_edge($1) then
		if ${2:i_rst_sync} = '1' then
			$0
		else
		end if; --$2
	end if; -- $1
end process;
endsnippet

snippet arst "Asyncrhonous reset"
process (${1:i_clk}) is
begin
	if ${2:i_arst} = '1' then
		$0
	else
		if rising_edge(i_clk) then
		end if; --$1
	end if; -- $2
end process; -- p_ARESET
endsnippet

snippet forg "For generate"
gen_${1:GENERATE}: for i in ${2:0} to ${3:MAX} generate
	$0
end generate gen_$1;
endsnippet

snippet record "type .... is record | end record;"
type ${1:t_record} is record
	$0
end record $1;
endsnippet

snippet assert "assert <condition>  report <message> severity <severity level>"
assert ${1:condition} report "${2:message}" severity ${3:error};
endsnippet
